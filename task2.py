import networkx as nx
from collections import deque

# Створюємо граф Київського метро (відповідно до останнього варіанту коду)
G = nx.Graph()

# Додаємо вузли і ребра (дані з попереднього коду)
stations = [
    # Червона лінія (Святошинсько-Броварська)
    "Академмістечко", "Житомирська", "Святошин", "Нивки", "Берестейська", 
    "Шулявська", "Політехнічний інститут", "Вокзальна", "Університет", "Театральна",
    "Хрещатик", "Арсенальна", "Дніпро", "Гідропарк", "Лівобережна", "Дарниця",
    "Чернігівська", "Лісова",
    # Синя лінія (Куренівсько-Червоноармійська)
    "Героїв Дніпра", "Мінська", "Оболонь", "Почайна", "Тараса Шевченка", 
    "Контрактова площа", "Поштова площа", "Майдан Незалежності", 
    "Площа Льва Толстого", "Олімпійська", "Палац Україна", "Либідська", 
    "Деміївська", "Голосіївська", "Васильківська", "Виставковий центр", 
    "Іподром", "Теремки",
    # Зелена лінія (Сирецько-Печерська)
    "Сирець", "Дорогожичі", "Лук'янівська", "Золоті ворота", "Палац Спорту", 
    "Кловська", "Печерська", "Дружби народів", "Видубичі", "Славутич", 
    "Осокорки", "Позняки", "Харківська", "Вирлиця", "Бориспільська", 
    "Червоний Хутір"
]

red_line_edges = [
    ("Академмістечко", "Житомирська"), 
    ("Житомирська", "Святошин"), 
    ("Святошин", "Нивки"), 
    ("Нивки", "Берестейська"),
    ("Берестейська", "Шулявська"), 
    ("Шулявська", "Політехнічний інститут"), 
    ("Політехнічний інститут", "Вокзальна"),
    ("Вокзальна", "Університет"),
    ("Університет", "Театральна"), 
    ("Театральна", "Хрещатик"), 
    ("Хрещатик", "Арсенальна"), 
    ("Арсенальна", "Дніпро"),
    ("Дніпро", "Гідропарк"), 
    ("Гідропарк", "Лівобережна"), 
    ("Лівобережна", "Дарниця"), 
    ("Дарниця", "Чернігівська"),
    ("Чернігівська", "Лісова")
]

blue_line_edges = [
    ("Героїв Дніпра", "Мінська"),
    ("Мінська", "Оболонь"),
    ("Оболонь", "Почайна"),
    ("Почайна", "Тараса Шевченка"),
    ("Тараса Шевченка", "Контрактова площа"),
    ("Контрактова площа", "Поштова площа"),
    ("Поштова площа", "Майдан Незалежності"),
    ("Майдан Незалежності", "Площа Льва Толстого"),
    ("Площа Льва Толстого", "Олімпійська"),
    ("Олімпійська", "Палац Україна"),
    ("Палац Україна", "Либідська"),
    ("Либідська", "Деміївська"),
    ("Деміївська", "Голосіївська"),
    ("Голосіївська", "Васильківська"),
    ("Васильківська", "Виставковий центр"),
    ("Виставковий центр", "Іподром"),
    ("Іподром", "Теремки")
]

green_line_edges = [
    ("Сирець", "Дорогожичі"),
    ("Дорогожичі", "Лук'янівська"),
    ("Лук'янівська", "Золоті ворота"),
    ("Золоті ворота", "Палац Спорту"),
    ("Палац Спорту", "Кловська"),
    ("Кловська", "Печерська"),
    ("Печерська", "Дружби народів"),
    ("Дружби народів", "Видубичі"),
    ("Видубичі", "Славутич"),
    ("Славутич", "Осокорки"),
    ("Осокорки", "Позняки"),
    ("Позняки", "Харківська"),
    ("Харківська", "Вирлиця"),
    ("Вирлиця", "Бориспільська"),
    ("Бориспільська", "Червоний Хутір")
]

# Додаємо ребра до графа
G.add_edges_from(red_line_edges)
G.add_edges_from(blue_line_edges)
G.add_edges_from(green_line_edges)

# Додаємо пересадки між лініями
G.add_edge("Театральна", "Золоті ворота")
G.add_edge("Хрещатик", "Майдан Незалежності")
G.add_edge("Площа Льва Толстого", "Палац Спорту")

# Функція для виконання DFS пошуку
def dfs(graph, start, goal, path=None, visited=None):
    if path is None:
        path = []
    if visited is None:
        visited = set()
        
    path.append(start)
    visited.add(start)
    
    if start == goal:
        return path
    
    for neighbor in graph[start]:
        if neighbor not in visited:
            result = dfs(graph, neighbor, goal, path.copy(), visited)
            if result:
                return result
    
    return None

# Функція для виконання BFS пошуку
def bfs(graph, start, goal):
    queue = deque([[start]])
    visited = set()
    
    while queue:
        path = queue.popleft()
        node = path[-1]
        
        if node in visited:
            continue
        
        if node == goal:
            return path
        
        visited.add(node)
        
        for neighbor in graph[node]:
            new_path = list(path)
            new_path.append(neighbor)
            queue.append(new_path)
    
    return None

# Виконуємо пошук між двома станціями (наприклад, "Академмістечко" і "Червоний Хутір")
start_station = "Академмістечко"
goal_station = "Червоний Хутір"

dfs_path = dfs(G, start_station, goal_station)
bfs_path = bfs(G, start_station, goal_station)

print(f"Шлях за допомогою DFS від {start_station} до {goal_station}: {dfs_path}")
print(f"Шлях за допомогою BFS від {start_station} до {goal_station}: {bfs_path}")

#